{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/useLocalStorage.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","TodoList","setTodos","test","newTodos","updateTodos","removeArr","filter","todoId","newValue","prev","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e33c117c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nconst TodoForm = (props) => {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n\n    const inputRef = useRef(null) // focus\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSubmit({\n            id: Math.floor(Math.random() * 1000),\n            text: input\n        }); \n\n        setInput('');\n    };\n\n    return (\n\n        <form className='todo-form' onSubmit={handleSubmit}>\n\n            {props.edit ? (\n                <>\n                    <input\n                        type='text'\n                        placeholder='Update your item'\n                        value={input}\n                        name='text'\n                        className='todo-input edit'\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button className='todo-button edit'>Update</button>\n                </>\n            ) :\n                (\n                    <>\n                        <input\n                            type='text'\n                            placeholder='Add a todo'\n                            value={input}\n                            name='text'\n                            className='todo-input'\n                            onChange={handleChange}\n                            ref={inputRef}\n                        />\n                        <button className='todo-button'>Add todo</button>\n                    </>\n                )\n            }\n        </form>\n    )\n\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react'\nimport TodoForm from './TodoForm'\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index} >\n\n            <div key={todo.id} onClick={() => completeTodo(todo.id)} >\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)}\n                    className='delete-icon' />\n                <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })}\n                    className='edit-icon' />\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo\n","\nimport { useState } from 'react';\n\nfunction useLocalStorage(key, initialValue) { \n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n   \n    const setValue = value => {\n      try {\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n  }\n\n  export default useLocalStorage;","import React from 'react'\nimport Todo from './Todo';\nimport TodoForm from './TodoForm'\nimport useLocalStorage from './useLocalStorage';\n\n\n\nconst TodoList = () => {\n    const [todos, setTodos] = useLocalStorage('todos', []);\n\n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return ;\n        }\n        const newTodos = [todo, ...todos]\n\n        setTodos(newTodos);\n    };\n\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n        setTodos(removeArr);\n    };\n\n\n    const completeTodo = id => {\n        let updateTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete; //si es true lo pasa a false si es false lo pasa a true,invierte el valor.\n            }\n            return todo;\n        })\n        setTodos(updateTodos);\n    }\n\n    return (\n        <div>\n            <h1>What's the plan for Today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo\n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo} />\n        </div>\n    )\n}\n\nexport default TodoList;\n","import React from 'react'\nimport TodoList from './components/TodoList'\nimport './App.css';\n\n\n\nconst App = () => {\n    return (\n        <>\n            <div className=\"todo-app\">\n                <TodoList />\n            </div>\n            <div className=\"footer\">\n                <p>Made with &hearts; by Estefan√≠a De Rosa Gil</p>\n            </div>\n            </>\n        \n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App/>,document.querySelector('#root')\n);"],"sourceRoot":""}